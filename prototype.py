# -*- coding: utf-8 -*-
"""Prototype.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P7MhjhRs4y8mQNyfOvpL7VeE9mn8zaya
"""

import os

os.system("pip install sentence_similarity")

import pandas as pd
import numpy as np
from sentence_similarity import sentence_similarity
import nltk
from nltk.corpus import wordnet
from nltk.tokenize import word_tokenize  
from collections import OrderedDict
from nltk.stem import PorterStemmer
nltk.download('wordnet')
nltk.download('punkt')

data = pd.read_csv("Cleaned_Questions.csv")
data

similarityModel =sentence_similarity(model_name='distilbert-base-uncased', embedding_type='cls_token_embedding')

not_considered = ['.', ',', 'I', 'this', 'that', 'a', 'her', 'she', 'of', 'me', 'at', 'do', 'to', 'am', 'and', '?', 'the', "'", 's', "’", '“']

def get_syns(word):
  ps = PorterStemmer()
  synonyms = []
    
  #get synonyms frm wordnet
  for syn in wordnet.synsets(word):
      for l in syn.lemmas():
          synonyms.append(l.name())
    
  #reduce words to stem
  synonyms = [ps.stem(syn) for syn in synonyms]
  
  #remove all dublicates and multi-word synonyms
  synonyms = [syn.lower() for syn in synonyms]
  synonyms = list(OrderedDict.fromkeys(synonyms))
  synonyms = [syn for syn in synonyms if (syn.find("_") == -1)]


  return synonyms




def get_syn_bucket(sentence):
  ps = PorterStemmer()

  #toeknize the sentence
  wdList = word_tokenize(sentence)

  #lowercase all characters
  wdList = [i.lower() for i in wdList]

  #remove transition words
  toRemove = not_considered
  wdList = [wd for wd in wdList if ((wd not in toRemove) and (wd.find("'") == -1))]



  #add words to syn bucket and at the synonyms of every word to the bucket
  synBuck = wdList.copy()
  synBuck = [ps.stem(syn) for syn in synBuck]

  for wd in wdList:
    synBuck += get_syns(wd)

  #remove dupes
  synBuck = list(OrderedDict.fromkeys(synBuck))

  

  return synBuck

data.reset_index(drop=True, inplace=True)
print(data.dtypes)

data['syn_bucket'] = [[]] * len(data)

for i in range(len(data)):
  data.at[i, 'syn_bucket'] = get_syn_bucket(data.at[i, 'Question'])
data

def process_question(q):
  ps = PorterStemmer()

  wdList = word_tokenize(q)
  
  wdList = [i.lower() for i in wdList]

  #remove transition words
  toRemove = not_considered
  wdList = [wd for wd in wdList if ((wd not in toRemove) and (wd.find("'") == -1))]

  wdList = [ps.stem(i) for i in wdList]

  return wdList


def make_prediction(q, include_cosine = True, print_freqs = False):
  qList = process_question(q)

  pred = [0] * len(data)

  for i in range(len(data)):
    synBuck = data.at[i, 'syn_bucket']
    for wd in qList:
      if wd in synBuck:
        pred[i] += 1

  #max (value, index)
  max = -1
  mxList = []

  #count the number of common synonyms between questions
  for i in range(len(pred)):
    if pred[i] > max:
      max = pred[i]
      mxList = [i]
    elif pred[i] == max:
      mxList.append(i)

  if print_freqs:
    print(pred)


  #give first 3 related questions
  if not include_cosine:
    return mxList[:3]

  #use cosign similarity as a tie breaker to find top 3 questions

  pred = []

  for i in mxList:
    pred.append((similarityModel.get_score(q, data['Question'][i], metric="cosine"), i))


  pred = sorted(pred, reverse=True)


  #return top 3 questions
  return pred[:3]

question = "When does the semester start?"


preds = make_prediction(question, include_cosine = True, print_freqs=True)

for pair in preds:
  print(data['Question'][pair[1]])
  print('\n')

"""#Practical Demo"""

question = input("Enter quesiton about NMSU Graduate School (or 'quit' to exit):\n")

while (question != 'quit'):

  preds = make_prediction(question, include_cosine = True, print_freqs=False)

  print("Which of the following most closly relates to your question?.")

  cnt = 1
  for pair in preds:
    print(str(cnt) + ") " + data['Question'][pair[1]])
    print()
    cnt += 1

  print("Respond with the question number ('1', '2', '3') that most closely relates to your question.")
  selected = input("If none of the prompted questions relate to yours, respond 'skip' and try rewording it:\n")

  print()
  if (selected.isnumeric()):
    if (selected != 'skip'):
      print("This is the candid answer for the question you chose:")
      print(data['Answer'][preds[int(selected) - 1][1]])
        
  else:
    print("Unexpected Input")
    


  question = input("Enter question about NMSU Graduate School (or 'quit' to exit):\n")
  continue